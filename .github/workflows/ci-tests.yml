name: Odoo Unit Tests

on:
  push:
  pull_request:

jobs:
  odoo-test:
    runs-on: binaural
    steps:
      - uses: actions/checkout@v3
      - name: Clonando odoo enterprise 
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          USER: ${{ secrets.USER }}
          ENTERPRISE_BRANCH: ${{ secrets.ENTERPRISE_BRANCH }}
        run: git clone https://${USER}:${ACCESS_TOKEN}@github.com/odoo/enterprise.git --branch ${ENTERPRISE_BRANCH}
      - name: Correr pruebas unitarias de odoo
        env:
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          PORT_SERVICE_HOST_ODOO: ${{ secrets.PORT_SERVICE_HOST_ODOO }}
          PORT_SERVICE_CONTAINER_ODOO: ${{ secrets.PORT_SERVICE_CONTAINER_ODOO }}
          ODOO_RELEASE: ${{ secrets.ODOO_RELEASE }}
          POSTGRES_IMG_VERSION: ${{ secrets.POSTGRES_IMG_VERSION }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          MODULES_TO_TEST: ${{ secrets.MODULES_TO_TEST }}
          SCREENSHOTS_DIR: ${{ github.workspace }}/artifact/screenshots
          SCREENCASTS_DIR: ${{ github.workspace }}/artifact/screencasts
        run: |
          docker-compose -f docker-compose_example.yml up -d
          TEST_TAGS="dev"
          if ${{ 
            startsWith(github.ref_name, 'master') || startsWith(github.ref_name, 'hotfix')
          }}
          then
            TEST_TAGS="standard, at_install"
          elif ${{ startsWith(github.ref_name, 'staging') }}
          then
            TEST_TAGS="standard, at_install, post_install"
          fi
          TEST_TAGS="$TEST_TAGS, -profiling_performance"
          echo "tags $TEST_TAGS"
          docker exec -i ${PROJECT_NAME} odoo -i "${MODULES_TO_TEST}" --http-port=15010 \
          --test-tags "${TEST_TAGS}" --log-level=test -d test --stop-after-init \
          --screenshots ${SCREENSHOTS_DIR} --screencasts ${SCREENCASTS_DIR}
      - name: Borrando base de datos de prueba
        if: always()
        env:
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        run: docker exec -i ${PROJECT_NAME}_db dropdb test -U ${POSTGRES_USER}
      - name: Bajando los contenedores
        if: always()
        env:
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        run: docker container kill ${PROJECT_NAME} ${PROJECT_NAME}_db
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          path: ${{ github.workspace }}/artifact/**/*
